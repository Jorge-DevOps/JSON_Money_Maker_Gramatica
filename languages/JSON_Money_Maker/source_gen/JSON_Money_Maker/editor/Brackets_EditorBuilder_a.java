package JSON_Money_Maker.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_DeleteSmart;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SEmptyContainmentSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

/*package*/ class Brackets_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public Brackets_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_nrg5o0_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createConstant_0());
    editorCell.addEditorCell(createRefNode_0());
    editorCell.addEditorCell(createRefNode_1());
    editorCell.addEditorCell(createRefNode_2());
    editorCell.addEditorCell(createRefNode_3());
    editorCell.addEditorCell(createRefNode_4());
    editorCell.addEditorCell(createRefNode_5());
    editorCell.addEditorCell(createConstant_1());
    return editorCell;
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "{");
    editorCell.setCellId("Constant_nrg5o0_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_0() {
    SingleRoleCellProvider provider = new moneyNameSingleRoleHandler_nrg5o0_b0(myNode, LINKS.moneyName$rCE7, getEditorContext());
    return provider.createCell();
  }
  private static class moneyNameSingleRoleHandler_nrg5o0_b0 extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public moneyNameSingleRoleHandler_nrg5o0_b0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), LINKS.moneyName$rCE7, child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), LINKS.moneyName$rCE7, child));
      installCellInfo(child, editorCell, false);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell, boolean isEmpty) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo((isEmpty ? new SEmptyContainmentSubstituteInfo(editorCell) : new SChildSubstituteInfo(editorCell)));
      }
      if (editorCell.getSRole() == null) {
        editorCell.setSRole(LINKS.moneyName$rCE7);
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), LINKS.moneyName$rCE7));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_moneyName");
        installCellInfo(null, editorCell, true);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no moneyName>";
    }
  }
  private EditorCell createRefNode_1() {
    SingleRoleCellProvider provider = new creatorSingleRoleHandler_nrg5o0_c0(myNode, LINKS.creator$rCT8, getEditorContext());
    return provider.createCell();
  }
  private static class creatorSingleRoleHandler_nrg5o0_c0 extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public creatorSingleRoleHandler_nrg5o0_c0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), LINKS.creator$rCT8, child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), LINKS.creator$rCT8, child));
      installCellInfo(child, editorCell, false);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell, boolean isEmpty) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo((isEmpty ? new SEmptyContainmentSubstituteInfo(editorCell) : new SChildSubstituteInfo(editorCell)));
      }
      if (editorCell.getSRole() == null) {
        editorCell.setSRole(LINKS.creator$rCT8);
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), LINKS.creator$rCT8));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_creator");
        installCellInfo(null, editorCell, true);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no creator>";
    }
  }
  private EditorCell createRefNode_2() {
    SingleRoleCellProvider provider = new currencies_symbolSingleRoleHandler_nrg5o0_d0(myNode, LINKS.currencies_symbol$s$VA, getEditorContext());
    return provider.createCell();
  }
  private static class currencies_symbolSingleRoleHandler_nrg5o0_d0 extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public currencies_symbolSingleRoleHandler_nrg5o0_d0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), LINKS.currencies_symbol$s$VA, child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), LINKS.currencies_symbol$s$VA, child));
      installCellInfo(child, editorCell, false);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell, boolean isEmpty) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo((isEmpty ? new SEmptyContainmentSubstituteInfo(editorCell) : new SChildSubstituteInfo(editorCell)));
      }
      if (editorCell.getSRole() == null) {
        editorCell.setSRole(LINKS.currencies_symbol$s$VA);
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), LINKS.currencies_symbol$s$VA));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_currencies_symbol");
        installCellInfo(null, editorCell, true);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no currencies_symbol>";
    }
  }
  private EditorCell createRefNode_3() {
    SingleRoleCellProvider provider = new countries_availabilitySingleRoleHandler_nrg5o0_e0(myNode, LINKS.countries_availability$Kq1, getEditorContext());
    return provider.createCell();
  }
  private static class countries_availabilitySingleRoleHandler_nrg5o0_e0 extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public countries_availabilitySingleRoleHandler_nrg5o0_e0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), LINKS.countries_availability$Kq1, child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), LINKS.countries_availability$Kq1, child));
      installCellInfo(child, editorCell, false);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell, boolean isEmpty) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo((isEmpty ? new SEmptyContainmentSubstituteInfo(editorCell) : new SChildSubstituteInfo(editorCell)));
      }
      if (editorCell.getSRole() == null) {
        editorCell.setSRole(LINKS.countries_availability$Kq1);
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), LINKS.countries_availability$Kq1));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_countries_availability");
        installCellInfo(null, editorCell, true);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no countries_availability>";
    }
  }
  private EditorCell createRefNode_4() {
    SingleRoleCellProvider provider = new coins_denominationsSingleRoleHandler_nrg5o0_f0(myNode, LINKS.coins_denominations$U413, getEditorContext());
    return provider.createCell();
  }
  private static class coins_denominationsSingleRoleHandler_nrg5o0_f0 extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public coins_denominationsSingleRoleHandler_nrg5o0_f0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), LINKS.coins_denominations$U413, child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), LINKS.coins_denominations$U413, child));
      installCellInfo(child, editorCell, false);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell, boolean isEmpty) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo((isEmpty ? new SEmptyContainmentSubstituteInfo(editorCell) : new SChildSubstituteInfo(editorCell)));
      }
      if (editorCell.getSRole() == null) {
        editorCell.setSRole(LINKS.coins_denominations$U413);
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), LINKS.coins_denominations$U413));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_coins_denominations");
        installCellInfo(null, editorCell, true);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no coins_denominations>";
    }
  }
  private EditorCell createRefNode_5() {
    SingleRoleCellProvider provider = new bills_denominationsSingleRoleHandler_nrg5o0_g0(myNode, LINKS.bills_denominations$HJc5, getEditorContext());
    return provider.createCell();
  }
  private static class bills_denominationsSingleRoleHandler_nrg5o0_g0 extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public bills_denominationsSingleRoleHandler_nrg5o0_g0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), LINKS.bills_denominations$HJc5, child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), LINKS.bills_denominations$HJc5, child));
      installCellInfo(child, editorCell, false);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell, boolean isEmpty) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo((isEmpty ? new SEmptyContainmentSubstituteInfo(editorCell) : new SChildSubstituteInfo(editorCell)));
      }
      if (editorCell.getSRole() == null) {
        editorCell.setSRole(LINKS.bills_denominations$HJc5);
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), LINKS.bills_denominations$HJc5));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_bills_denominations");
        installCellInfo(null, editorCell, true);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no bills_denominations>";
    }
  }
  private EditorCell createConstant_1() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "}");
    editorCell.setCellId("Constant_nrg5o0_h0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink moneyName$rCE7 = MetaAdapterFactory.getContainmentLink(0x710461f793be4cd2L, 0xa43edef6a6c682b1L, 0x668849c5ce9dc773L, 0x668849c5ce9eafc9L, "moneyName");
    /*package*/ static final SContainmentLink creator$rCT8 = MetaAdapterFactory.getContainmentLink(0x710461f793be4cd2L, 0xa43edef6a6c682b1L, 0x668849c5ce9dc773L, 0x668849c5ce9eafcaL, "creator");
    /*package*/ static final SContainmentLink currencies_symbol$s$VA = MetaAdapterFactory.getContainmentLink(0x710461f793be4cd2L, 0xa43edef6a6c682b1L, 0x668849c5ce9dc773L, 0x668849c5ce9fdce8L, "currencies_symbol");
    /*package*/ static final SContainmentLink countries_availability$Kq1 = MetaAdapterFactory.getContainmentLink(0x710461f793be4cd2L, 0xa43edef6a6c682b1L, 0x668849c5ce9dc773L, 0x668849c5ce9fd9ecL, "countries_availability");
    /*package*/ static final SContainmentLink coins_denominations$U413 = MetaAdapterFactory.getContainmentLink(0x710461f793be4cd2L, 0xa43edef6a6c682b1L, 0x668849c5ce9dc773L, 0x668849c5ce9ff629L, "coins_denominations");
    /*package*/ static final SContainmentLink bills_denominations$HJc5 = MetaAdapterFactory.getContainmentLink(0x710461f793be4cd2L, 0xa43edef6a6c682b1L, 0x668849c5ce9dc773L, 0x668849c5ce9ffaa3L, "bills_denominations");
  }
}
